{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "a1c3420e-dfe4-4ac7-b8a3-66163875a0f7",
      "cell_type": "markdown",
      "source": "# => Basic Python Programming Concepts\n                                                  \n Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility.\n Python is widely used due to its powerful features and ease of use.\nSection 1: Python Operators and Control Structures (5 questions)\n\n1.Question: Write a Python program to calculate the sum of all numbers in a list using a for loop.\n\nSample Input: numbers = [1, 2, 3, 4, 5]\n\nSample Output: 15",
      "metadata": {}
    },
    {
      "id": "f52e5ff7-93ac-4175-959c-c3858f248ae7",
      "cell_type": "markdown",
      "source": "numbers = [1, 2, 3, 4, 5]\ns=0\nfor i in numbers:\n    s=s+i\nprint(s)\n\n",
      "metadata": {}
    },
    {
      "id": "13de8bc9-6bc4-4b6a-81c6-3b474426ce53",
      "cell_type": "markdown",
      "source": "2.Question: What is the output of the following code?\n\nCode:\n\nx = 5\n\ny = 2 print(x ** y)\n\nSample Output: 25",
      "metadata": {}
    },
    {
      "id": "23af974d-9879-4472-abeb-a5be7c532521",
      "cell_type": "code",
      "source": "x=5\ny=2\nprint(x**y) ",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "25\n"
        }
      ],
      "execution_count": 2
    },
    {
      "id": "4fc13173-927c-4959-9dae-cabd9b659046",
      "cell_type": "markdown",
      "source": "Explanation ** -> It is a exponential operator. So, it retruns 5**2=25\n\n",
      "metadata": {}
    },
    {
      "id": "535cb8e9-dd4a-4935-8021-20386169003a",
      "cell_type": "markdown",
      "source": "\n\n3.Question: Write a Python program to check if a number is a palindrome using a while loop.\n\nSample Input: num = 12321\n\nSample Output: True",
      "metadata": {}
    },
    {
      "id": "62c77477-f019-42c3-b6cc-ef4a667393c4",
      "cell_type": "code",
      "source": "num=12321\nn=num\nres=0\nrem=0\nwhile num>0:\n    rem=num%10\n    res=(res*10)+rem\n    num=num//10\nif n==res:\n    print(\"true\")\nelse :\n    print(\"false\")",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "true\n"
        }
      ],
      "execution_count": 3
    },
    {
      "id": "fdeb8b82-60b1-4861-9089-f13ae83492bf",
      "cell_type": "markdown",
      "source": "4 Question: What is the output of the following code?\n\nCode:\n\nfruits = ['apple', 'banana', 'cherry']\n\nprint(fruits[-1])\n\nSample Output: cherry",
      "metadata": {}
    },
    {
      "id": "e99cb699-c5e0-487a-8c02-d9bf3e0f542f",
      "cell_type": "code",
      "source": "fruits=['apple','banana','cherry']\nprint(fruits[-1])",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "cherry\n"
        }
      ],
      "execution_count": 4
    },
    {
      "id": "f9d965a9-83af-4498-a23c-e807968826f7",
      "cell_type": "markdown",
      "source": "Explanation fruits[-1] is index position of cherry",
      "metadata": {}
    },
    {
      "id": "521ca9dd-f7d1-4dca-b327-558067543053",
      "cell_type": "markdown",
      "source": "5.Question: Write a Python program to calculate the average of all numbers in a list using a for loop.\n\nSample Input: numbers = [1, 2, 3, 4, 5]\n\nSample Output: 3.0",
      "metadata": {}
    },
    {
      "id": "b3b6c05f-d276-46d2-b672-c5251de1b0c7",
      "cell_type": "code",
      "source": "numbers=[1,2,3,4,5]\ns=0\nfor i in numbers:\n    s=i+s\navg=s/len(numbers)\nprint(avg)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "3.0\n"
        }
      ],
      "execution_count": 5
    },
    {
      "id": "76d801a5-59e3-4f90-9f0e-8177851e3caa",
      "cell_type": "markdown",
      "source": "=> Section 2: Lists and Dictionaries (5 questions)\n\n6.Question: Write a Python program to create a dictionary with student names as keys and their grades as values.\n\nSample Input: students = ['John', 'Alice', 'Bob'], grades = [90, 85, 95]\n\nSample Output: {'John': 90, 'Alice': 85, 'Bob': 95}",
      "metadata": {}
    },
    {
      "id": "e4892366-3978-47a3-9a67-f2ead8c36ebd",
      "cell_type": "code",
      "source": "students = ['John', 'Alice', 'Bob']\ngrades = [90, 85, 95]\ndic={}\nfor i in range(len(students)):\n    dic[students[i]]=grades[i]\nprint(dic)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "{'John': 90, 'Alice': 85, 'Bob': 95}\n"
        }
      ],
      "execution_count": 7
    },
    {
      "id": "e37b754e-0c98-415d-a6ea-7e836e3332ed",
      "cell_type": "markdown",
      "source": "7.Question: What is the output of the following code?\n\nCode:\n\nnumbers = [1, 2, 3, 4, 5]\n\nprint(numbers[1:3])\n\nSample Output: [2, 3]",
      "metadata": {}
    },
    {
      "id": "3833a4db-67d3-4ef2-b5ad-88a3b270163a",
      "cell_type": "code",
      "source": "numbers = [1, 2, 3, 4, 5]\nprint(numbers[1:3])",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "[2, 3]\n"
        }
      ],
      "execution_count": 8
    },
    {
      "id": "21ef6b56-ef9f-4038-99c0-1b6c9356e52c",
      "cell_type": "markdown",
      "source": "Explanation\n\nnumbers[1:3] is list slicing.\n\nIt extracts elements starting from index 1 up to (but not including) index 3.\n8.Question: Write a Python program to sort a list of numbers in ascending order using the sorted() function.\n\nSample Input: numbers = [4, 2, 9, 6, 5]\n\nSample Output: [2, 4, 5, 6, 9]",
      "metadata": {}
    },
    {
      "id": "fba2dade-0e07-4a71-9c71-afb03567e9a2",
      "cell_type": "code",
      "source": "numbers = [4, 2, 9, 6, 5]\nprint(sorted(numbers))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "[2, 4, 5, 6, 9]\n"
        }
      ],
      "execution_count": 2
    },
    {
      "id": "bad6205f-caf6-42f4-9044-991d02f3ac35",
      "cell_type": "markdown",
      "source": "Explanation\n\n sorted() function is used to arrange given list in ascending order\n9.Question: What is the output of the following code?\n\nCode:\n\nfruits = {'apple': 5, 'banana': 10, 'cherry': 15}\n\nprint(fruits.get('banana'))\n\nSample Output: 10",
      "metadata": {}
    },
    {
      "id": "6e5016e2-1f42-4319-b0ba-37e3b71685e4",
      "cell_type": "code",
      "source": "fruits = {'apple': 5, 'banana': 10, 'cherry': 15}\n\nprint(fruits.get('banana'))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "10\n"
        }
      ],
      "execution_count": 9
    },
    {
      "id": "9b90f513-46ec-452a-a837-e2d9b19c88a4",
      "cell_type": "markdown",
      "source": "Explanation\n\nIn fruits dictionary, we are retrieving a value of key(banana) by using get() method.\n10.Question: Write a Python program to create a list of squares of all numbers from 1 to 10 using a list comprehension.\n\nSample Output: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "metadata": {}
    },
    {
      "id": "61eb02a3-0d94-40c9-9ca0-7d437a9c9d8b",
      "cell_type": "code",
      "source": "n=[i**2 for i in range(1,11)]\nprint(n)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n"
        }
      ],
      "execution_count": 10
    },
    {
      "id": "7af366f9-a39c-4972-9bdf-e55f203fa258",
      "cell_type": "markdown",
      "source": "Explanation\n\n List comprehension is a concise way to create lists in Python using a single line of code. It replaces loops for generating lists, making the code more readable and efficient.\n\n new_list = [expression(element) 'for' element 'in' iterable_object 'if' condition ]\n \n=>Section 3: Advanced Topics (5 questions)",
      "metadata": {}
    },
    {
      "id": "47bcbca7-7000-4d99-a4e0-cdb023063726",
      "cell_type": "markdown",
      "source": "11.Question: Write a Python program to calculate the factorial of a number using recursion.\n\nSample Input: num = 5\n\nSample Output: 120",
      "metadata": {}
    },
    {
      "id": "6e96bada-3dae-4630-8653-a847ca24b594",
      "cell_type": "code",
      "source": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nnum = 5\nprint(factorial(num))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "120\n"
        }
      ],
      "execution_count": 11
    },
    {
      "id": "e364ee21-42a4-44f9-9419-b939bd8717af",
      "cell_type": "markdown",
      "source": "12. Question: What is the output of the following code?\n\nCode:\n\nnumbers = [1, 2, 3, 4, 5]\n\nprint(list(reversed(numbers)))\n\nSample Output: [5, 4, 3, 2, 1]",
      "metadata": {}
    },
    {
      "id": "29480a55-6408-4520-9ede-7d320393a6ba",
      "cell_type": "code",
      "source": "numbers = [1, 2, 3, 4, 5]\n\nprint(list(reversed(numbers)))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "[5, 4, 3, 2, 1]\n"
        }
      ],
      "execution_count": 12
    },
    {
      "id": "c4a6aecf-635b-4dce-b38d-5816baa5a767",
      "cell_type": "markdown",
      "source": "Explanation: reversed(numbers) returns an iterator that produces elements in reverse order. list(reversed(numbers)) converts the iterator into a list.",
      "metadata": {}
    },
    {
      "id": "d608f109-2e22-46a7-ab78-8ac6700a1203",
      "cell_type": "markdown",
      "source": "13.Question: Write a Python program to create a generator that yields the Fibonacci sequence up to the nth term.\n\nSample Input: n = 10\n\nSample Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]",
      "metadata": {}
    },
    {
      "id": "3affd61e-1854-4e19-b5cf-d5036535ef70",
      "cell_type": "code",
      "source": "def fibonacci(n):\n    a, b = 0, 1\n    for i in range(n):\n        yield a\n        a, b = b, a + b\n\nn = 10\nprint(list(fibonacci(n)))",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"
        }
      ],
      "execution_count": 6
    },
    {
      "id": "d13f7155-f258-4709-8783-f3328099b4bb",
      "cell_type": "markdown",
      "source": "Explanation:\n\nyield is used to create a generator instead of storing all values in memory.\na, b = 0, 1 initializes the first two numbers.\nThe loop runs n times, yielding a each time and updating a and b.",
      "metadata": {}
    },
    {
      "id": "acd1a14c-39be-4d7d-ab5c-0189796cc184",
      "cell_type": "markdown",
      "source": "14.Question: What is the output of the following code?\n\nCode:\n\nimport math\n\nprint(math.pi)\n\nSample Output: 3.14159...",
      "metadata": {}
    },
    {
      "id": "303a2318-4bea-48ba-8b79-4dc95ba37f39",
      "cell_type": "code",
      "source": "import math\n\nprint(math.pi)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "3.141592653589793\n"
        }
      ],
      "execution_count": 8
    },
    {
      "id": "85c3ef1e-cc81-4a6b-9cef-812e20b0f3ab",
      "cell_type": "markdown",
      "source": "Explanation\n\n  The math module is imported and math.pi is a constant in the math module that represents the mathematical value of π (pi).\n  The value of math.pi is approximately 3.141592653589793.",
      "metadata": {}
    },
    {
      "id": "dc0d2d0b-fd7f-4ea4-a6ed-dee3365d3fe4",
      "cell_type": "markdown",
      "source": "15.Question: Write a Python program to print the inverted star pyramid of height 5.",
      "metadata": {}
    },
    {
      "id": "e2b7b072-978f-4b8c-ad3e-12bc83b6d410",
      "cell_type": "code",
      "source": "for i in range(5,0,-1):\n    print(\" \"*(5-i)+\"* \"*i)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "* * * * * \n * * * * \n  * * * \n   * * \n    * \n"
        }
      ],
      "execution_count": 9
    },
    {
      "id": "f173b2b3-cd4e-48f7-bc00-6697c8bc1fbb",
      "cell_type": "markdown",
      "source": "Explanation: The for loop runs from height(5) down to 1, decreasing in each iteration. \" \" * (5-i) adds leading spaces to align the pyramid. \"* \" * i prints decreasing stars in each row.",
      "metadata": {}
    },
    {
      "id": "50d71f30-4e23-47cd-bedb-4d5f17eff79b",
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}